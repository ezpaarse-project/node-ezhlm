#!/usr/bin/env node

const program = require('commander');
const pkg = require('./package.json');

const logger = require('./lib/logger');

const { manageConfig } = require('./cmds/config');
const { ping } = require('./cmds/ping');
const insertFromHLM = require('./cmds/hlm');

const {
  initEnrich,
  updateSnapshot,
  downloadMarc,
  fillTmpSnapshot,
  update,
  deleteFromMarc,
  mergeMarcIndex,
} = require('./cmds/ebsco');

const { resetIndex, createIndex } = require('./cmds/elastic');

program.on('command:*', () => {
  logger.error(`Invalid command: ${program.args.join(' ')}\nSee --help for a list of available commands.`);
  process.exit(1);
});

program.version(pkg.version);

program
  .command('config')
  .description('config management command to establish the connection between the command and ez-meta')
  .option('-g --get', 'display the configuration')
  .option('-s --set <key> <value>', 'update config')
  .option('-L --list', 'list of attributes required for configuration')
  .action((options) => manageConfig(options));

program
  .command('ping')
  .description('Check if service is available')
  .action((options) => ping(options));

program
  .command('create-index')
  .description('create elastic index with ezhlm mapping')
  .option('-i --index <index>', 'index')
  .action((options) => createIndex(options));

program
  .command('insert')
  .description('Insert data from csv files generated by HLM')
  .option('-f --file <file>', 'file that content HLM files')
  .option('-i --index <index>', 'index to wich insert the content of folder')
  .option('-d --date <date>', 'date of HLM data')
  .action((options) => insertFromHLM(options));

program
  .command('initEnrich')
  .description('Harvest all the data from the snapshot of HoldingsIQ API for each institution to enrich the existing')
  .option('-c --customer <customer>', 'customer')
  .action((options) => initEnrich(options));

program
  .command('updateSnapshot')
  .description('update holdings snapshot on holdings API')
  .option('-c --customer <customer>', 'customer')
  .action((options) => updateSnapshot(options));

program
  .command('fillTmpSnapshot')
  .description('Create tmp snapshot for update and fill it')
  .option('-c --customer <customer>', 'customer')
  .action((options) => fillTmpSnapshot(options));

program
  .command('downloadMarc')
  .description('download marc files from FTP server')
  .option('-c --customer <customer>', 'customer')
  .action((options) => downloadMarc(options));

program
  .command('update')
  .description('Enriches the ezhlm index data by creating ezhlm-id according to the XML file content (from Marc Update) and enriches these id with the holdingsIQ API')
  .option('-i --index <index>', 'index')
  .option('-c --customer <customer>', 'customer')
  .action((options) => update(options));

program
  .command('merge')
  .description('merge the Marc index in the current index')
  .option('-i --index <index>', 'index')
  .option('-c --customer <customer>', 'customer')
  .action((options) => mergeMarcIndex(options));

program
  .command('delete')
  .description('delete data from current snapshots with ezhlmid from Marc delete files')
  .option('-i --index <index>', 'index')
  .option('-c --customer <customer>', 'customer')
  .action((options) => deleteFromMarc(options));

program
  .command('reset')
  .description('Empty elastic index')
  .option('-i --index <index>', 'index')
  .option('-c --customer <customer>', 'customer')
  .action((options) => resetIndex(options));

program.parse(process.argv);
